# https://docs.base.org/onchainkit/llms-full.txt

## OnchainKit — Deep Guide for LLMs

> OnchainKit is a React/TypeScript SDK that ships production‑ready components, hooks, and APIs to build onchain apps fast, with first‑class support for Base.

### What you can do here
- Install and configure OnchainKit in Next.js/Vite
- Use the OnchainKitProvider to wire chains, API keys, and appearance
- Compose wallet, transaction, swap, mint, and identity components
- Call server APIs for quotes, tokens, portfolios
- Test E2E with OnchainTestKit

## Minimal Critical Code (provider)
```tsx
import { OnchainKitProvider } from '@coinbase/onchainkit'
import { base } from 'wagmi/chains'

export function Providers(props: { children: React.ReactNode }) {
  return (
    <OnchainKitProvider apiKey={process.env.NEXT_PUBLIC_ONCHAINKIT_API_KEY} chain={base}>
      {props.children}
    </OnchainKitProvider>
  )
}
```

## Navigation (with brief descriptions)

### Introduction
- [Getting Started](./getting-started) — Install, scaffold, test
- [Telemetry](./guides/telemetry) — Metrics
- [Troubleshooting](./guides/troubleshooting) — Common issues

### Installation
- [Next.js](./installation/nextjs) — Install in Next.js
- [Vite](./installation/vite) — Install in Vite
- [Remix](./installation/remix) — Install in Remix
- [Astro](./installation/astro) — Install in Astro

### Config
- [OnchainKitProvider](./config/onchainkit-provider) — Provider config
- [Supplemental Providers](./config/supplemental-providers) — Custom providers
- [Types](./config/types) — Config types

### Guides
- [Lifecycle Status](./guides/lifecycle-status) — Stability
- [Tailwind](./guides/tailwind) — Styling
- [Themes](./guides/themes) — Theming
- [Use Basename](./guides/use-basename-in-onchain-app) — Basename integration
- [Using AI IDEs](./guides/using-ai-powered-ides) — Copilot patterns
- [AI Prompting Guide](./guides/ai-prompting-guide) — Prompt patterns
- [Testing with OnchainTestKit](./guides/testing-with-onchaintestkit) — E2E
- [Reporting Bug](./guides/reporting-bug) — Issues
- [Contribution](./guides/contribution) — Contribute

### Templates
- [Onchain NFT App](./templates/onchain-nft-app)
- [Onchain Commerce App](./templates/onchain-commerce-app)
- [Onchain Social Profile](./templates/onchain-social-profile)

### Components (selected)
- [Appchain/Bridge](./appchain/bridge) — Bridge widget
- [Buy](./buy/buy) — Onramp UI
- [Checkout](./checkout/checkout) — Commerce flows
- [Earn](./earn/earn) — Yield UI
- [Fund Button/Card](./fund/fund-button) — Onramp components
- [Identity](./identity/identity) — Identity components
- [Mint](./mint/nft-card) — NFT UI
- [Signature](./signature/signature) — Sign flows
- [Swap](./swap/swap) — Swap UI
- [Token](./token/token-chip) — Token UI
- [Transaction](./transaction/transaction) — Transactions
- [Wallet](./wallet/wallet) — Wallet UI

### API
- [Mint: Build Tx](./api/build-mint-transaction)
- [Swap: Build Tx](./api/build-swap-transaction)
- [Swap: Quote](./api/get-swap-quote)
- [Token: List](./api/get-tokens)
- [Wallet: Portfolios](./api/get-portfolios)

### Utilities
- [Earn: build deposit/withdraw tx](./api/build-deposit-to-morpho-tx)
- [Fund: onramp helpers](./fund/get-onramp-buy-url)
- [Identity: lookups and hooks](./identity/get-address)
- [Mint: hooks](./hooks/use-mint-details)
- [Token: formatting](./token/format-amount)
- [Wallet: helpers](./wallet/is-wallet-a-coinbase-smart-wallet)

### Types
- [API](./api/types), [Appchain](./appchain/types), [Checkout](./checkout/types), [Config](./config/types), [Earn](./earn/types), [Fund](./fund/types), [Identity](./identity/types), [Mint](./mint/types), [Signature](./signature/types), [Swap](./swap/types), [Token](./token/types), [Transaction](./transaction/types), [Wallet](./wallet/types)


## Quickstart (excerpts)

Source: `https://docs.base.org/onchainkit/getting-started`

Install and wire the provider:

```bash
npm install @coinbase/onchainkit wagmi viem
```

```tsx
import { OnchainKitProvider } from '@coinbase/onchainkit'
import { base } from 'wagmi/chains'

export function Providers(props: { children: React.ReactNode }) {
  return (
    <OnchainKitProvider apiKey={process.env.NEXT_PUBLIC_ONCHAINKIT_API_KEY} chain={base}>
      {props.children}
    </OnchainKitProvider>
  )
}
```

Minimal wallet + transaction UI:

Source: `https://docs.base.org/onchainkit/wallet/wallet` and `https://docs.base.org/onchainkit/transaction/transaction`

```tsx
import { Wallet } from '@coinbase/onchainkit/wallet'
import { Transaction } from '@coinbase/onchainkit/transaction'

export function Checkout() {
  return (
    <div>
      <Wallet />
      <Transaction calls={[{ to: USDC, data: erc20.approve(MERCHANT, AMOUNT) }]} />
    </div>
  )
}
```


## Key Concepts (excerpts)

Source: `https://docs.base.org/onchainkit/config/onchainkit-provider`

- Provider role: Central place to configure chain, API key, appearance, and integrations. Keep it high in the tree to enable components and hooks.
- Lifecycle status: Components and APIs expose stability levels to guide production usage.
  - Source: `https://docs.base.org/onchainkit/guides/lifecycle-status`
- Composition model: Building blocks (Wallet, Transaction, Swap, Mint, Identity) compose into product flows with sensible defaults.
- Server APIs: Quote and transaction‑builder endpoints power client components, reducing onchain logic in the browser.


## API (selected, pruned)

OnchainKit interface

- Get Swap Quote — `GET /v1/swap/quote?fromToken=...&toToken=...&amount=...`
  - Source: `https://docs.base.org/onchainkit/api/get-swap-quote`
- Build Swap Transaction — `POST /v1/swap/build`
  - Source: `https://docs.base.org/onchainkit/api/build-swap-transaction`
- Get Tokens — `GET /v1/tokens`
  - Source: `https://docs.base.org/onchainkit/api/get-tokens`
- Get Portfolios — `GET /v1/wallets/{address}/portfolios`
  - Source: `https://docs.base.org/onchainkit/api/get-portfolios`

Component props and types

- Transaction — core props include `calls`, `onStatus`, `appearance`
  - Source: `https://docs.base.org/onchainkit/transaction/transaction`
- Wallet — `onConnect`, `onDisconnect`, `appearance`
  - Source: `https://docs.base.org/onchainkit/wallet/wallet`


## Examples (common flows)

Example: Fetch and display a swap quote, then build a tx

Sources:
- `https://docs.base.org/onchainkit/api/get-swap-quote`
- `https://docs.base.org/onchainkit/api/build-swap-transaction`

```ts
const quote = await fetch(`/api/ock/swap/quote?fromToken=${from}&toToken=${to}&amount=${amount}`).then(r => r.json())
const build = await fetch('/api/ock/swap/build', { method: 'POST', body: JSON.stringify({ quote }) }).then(r => r.json())
```

Example: Programmatic transaction calls

Source: `https://docs.base.org/onchainkit/transaction/transaction`

```tsx
<Transaction
  calls={[
    { to: USDC, data: erc20.approve(SPENDER, AMOUNT) },
    { to: SPENDER, data: spender.purchase(AMOUNT) }
  ]}
  onStatus={s => console.log(s)}
/>
```

